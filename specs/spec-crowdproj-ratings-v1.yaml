openapi: 3.0.3
info:
  title: Ratings
  description: |
    Crowd project - Ratings
  contact:
    email: shvetson@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: App Server
tags:
  - name: rating
    description: Ratings
paths:
  /ratings/create:
    post:
      tags:
        - rating
      summary: Create rating
      operationId: ratingCreate
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingCreateRequest'
        required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingCreateResponse'
  /ratings/read:
    post:
      tags:
        - rating
      summary: Read rating
      operationId: ratingRead
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingReadResponse'
  /ratings/update:
    post:
      tags:
        - rating
      summary: Update rating
      operationId: ratingUpdate
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingUpdateResponse'
  /ratings/delete:
    post:
      tags:
        - rating
      summary: Delete rating
      operationId: ratingDelete
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingDeleteResponse'
  /ratings/search:
    post:
      tags:
        - rating
      summary: Search rating
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      operationId: ratingSearch
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSearchResponse'

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    IRequest: # Can be referenced as '#/components/schemas/IRequest'
      type: object
      description: An interface for all requests
      properties:
        requestType:
          type: string
          description: A discriminator to determinate the request type
          example: create
        requestId:
          type: string
          description: A request ID for debug
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/RatingCreateRequest'
          read: '#/components/schemas/RatingReadRequest'
          update: '#/components/schemas/RatingUpdateRequest'
          delete: '#/components/schemas/RatingDeleteRequest'
          search: '#/components/schemas/RatingSearchRequest'

    Error: # Can be referenced as '#/components/schemas/Error'
      $ref: './base.yaml#/components/schemas/Error'

    ResponseResult: # Can be referenced as '#/components/schemas/ResponseResult'
      $ref: './base.yaml#/components/schemas/ResponseResult'

    IResponse: # Can be referenced as '#/components/schemas/IResponse'
      type: object
      description: An interface for all responses
      properties:
        responseType:
          type: string
          description: A discriminator to determinate the response type
          example: create
        requestId:
          type: string
          description: A response ID for debug
        result:
          $ref: '#/components/schemas/ResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/RatingCreateResponse'
          read:   '#/components/schemas/RatingReadResponse'
          update: '#/components/schemas/RatingUpdateResponse'
          delete: '#/components/schemas/RatingDeleteResponse'
          search: '#/components/schemas/RatingSearchResponse'
          init: '#/components/schemas/RatingInitResponse'

    ObjectId: # Can be referenced as '#/components/schemas/ObjectId'
      type: string
      description: A rating object ID
      example: "1211"

    ObjectTypeId: # Can be referenced as '#/components/schemas/ObjectTypeId'
      type: string
      description: An object type ID
      example: "11"

    RatingId: # Can be referenced as '#/components/schemas/RatingId'
      type: string
      description: A rating ID
      example: "111"

    UserId: # Can be referenced as '#/components/schemas/UserId'
      $ref: './base.yaml#/components/schemas/UserId'

    ScoreTypeId: # Can be referenced as '#/components/schemas/ScoreTypeId'
      type: string
      description: A score type ID
      example: "1"

    RatingLock: # Can be referenced as '#/components/schemas/RatingLock'
      type: string
      description: An optimistic lock version

    BaseRating: # Can be referenced as '#/components/schemas/BaseRating'
      type: object
      description: The base object properties
      properties:
        scoreTypeId:
          $ref: '#/components/schemas/ScoreTypeId'
        objectId:
          $ref: '#/components/schemas/ObjectId'
        objectTypeId:
          $ref: '#/components/schemas/ObjectTypeId'
        score:
          type: string
          description: A rating score
          example: "3.5"
        voteCount:
          type: string
          description: A votes count
          example: "200"
        createdAt:
          type: string
          format: date-time
          description: A rating date and time created
        updatedAt:
          type: string
          format: date-time
          description: A rating date and time updated
        ownerId:
          $ref: '#/components/schemas/UserId'

    RatingInitResponse: # Can be referenced as '#/components/schemas/RatingInitResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'

    RatingCreateObject: # Can be referenced as '#/components/schemas/RatingCreateObject'
      allOf:
        - type: object
          properties:
            scoreTypeId:
              $ref: '#/components/schemas/ScoreTypeId'
            objectId:
              $ref: '#/components/schemas/ObjectId'
            objectTypeId:
              $ref: '#/components/schemas/ObjectTypeId'

    RatingCreateRequest: # Can be referenced as '#/components/schemas/RatingCreateRequest'
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/RatingRequestDebug'
        - type: object
          properties:
            rating:
              $ref: '#/components/schemas/RatingCreateObject'

    RatingReadObject: # Can be referenced as '#/components/schemas/RatingReadObject'
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/RatingId'

    RatingReadRequest: # Can be referenced as '#/components/schemas/RatingReadRequest'
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/RatingRequestDebug'
        - type: object
          properties:
            rating:
              $ref: '#/components/schemas/RatingReadObject'

    RatingUpdateObject: # Can be referenced as '#/components/schemas/RatingUpdateObject'
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/RatingId'
            scoreTypeId:
              $ref: '#/components/schemas/ScoreTypeId'
            objectId:
              $ref: '#/components/schemas/ObjectId'
            objectTypeId:
              $ref: '#/components/schemas/ObjectTypeId'
            lock:
              $ref: '#/components/schemas/RatingLock'

    RatingUpdateRequest: # Can be referenced as '#/components/schemas/RatingUpdateRequest'
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/RatingRequestDebug'
        - type: object
          properties:
            rating:
              $ref: '#/components/schemas/RatingUpdateObject'

    RatingDeleteObject: # Can be referenced as '#/components/schemas/RatingDeleteObject'
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/RatingId'
            lock:
              $ref: '#/components/schemas/RatingLock'

    RatingDeleteRequest: # Can be referenced as '#/components/schemas/RatingDeleteRequest'
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/RatingRequestDebug'
        - type: object
          properties:
            rating:
              $ref: '#/components/schemas/RatingDeleteObject'

    RatingSearchFilter: # Can be referenced as '#/components/schemas/RatingSearchFilter'
      type: object
      description: A list of filters to search
      properties:
        searchString:
          type: string
          description: A search string that will be searched for in ratings

    RatingSearchRequest: # Can be referenced as '#/components/schemas/RatingSearchRequest'
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/RatingRequestDebug'
        - type: object
          properties:
            ratingFilter:
              $ref: '#/components/schemas/RatingSearchFilter'

    RatingResponseObject: # Can be referenced as '#/components/schemas/RatingResponseObject'
      allOf:
        - $ref: '#/components/schemas/BaseRating'
        - type: object
          description: An object that is returned in the response
          properties:
            id:
              $ref: '#/components/schemas/RatingId'
            lock:
              $ref: '#/components/schemas/RatingLock'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/RatingPermissions'

    RatingPermissions: # Can be referenced as '#/components/schemas/RatingPermissions'
      type: string
      description: A list of available operations on ratings
      enum:
        - read
        - update
        - delete
        - makeVisiblePublic
        - makeVisibleOwn
        - makeVisibleGroup

    RatingResponseSingle: # Can be referenced as '#/components/schemas/RatingResponseSingle'
      allOf:
        - type: object
          description: A response with one rating
          properties:
            rating:
              $ref: '#/components/schemas/RatingResponseObject'

    RatingResponseMulti: # Can be referenced as '#/components/schemas/RatingResponseMulti'
      allOf:
        - type: object
          description: A ratings list
          properties:
            ratings:
              type: array
              items:
                $ref: '#/components/schemas/RatingResponseObject'

    RatingCreateResponse: # Can be referenced as '#/components/schemas/RatingCreateResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/RatingResponseSingle'

    RatingReadResponse: # Can be referenced as '#/components/schemas/RatingReadResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/RatingResponseSingle'

    RatingUpdateResponse: # Can be referenced as '#/components/schemas/RatingUpdateResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/RatingResponseSingle'

    RatingDeleteResponse: # Can be referenced as '#/components/schemas/RatingDeleteResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/RatingResponseSingle'

    RatingSearchResponse: # Can be referenced as '#/components/schemas/RatingSearchResponse'
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/RatingResponseMulti'

    #-------------------------------
    # STUBS
    #-------------------------------

    RatingRequestDebugMode: # Can be referenced as '#/components/schemas/RatingRequestDebugMode'
      $ref: './base.yaml#/components/schemas/CpRequestDebugMode'

    RatingRequestDebugStubs: # Can be referenced as '#/components/schemas/RatingRequestDebugStubs'
      $ref: './base.yaml#/components/schemas/CpRequestDebugStubs'

    RatingDebug: # Can be referenced as '#/components/schemas/RatingDebug'
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/RatingRequestDebugMode'
        stub:
          $ref: '#/components/schemas/RatingRequestDebugStubs'

    RatingRequestDebug: # Can be referenced as '#/components/schemas/RatingRequestDebug'
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/RatingDebug'

  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    offsetParam: # Can be referenced via '#/components/parameters/offsetParam'
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam: # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20